// ****************** PAQUETE ******************

// package com.ivor.empleos.controllers;
// - Define el paquete en el que se encuentra este controlador dentro del proyecto.
// - Ayuda a organizar el c√≥digo en m√≥dulos espec√≠ficos, facilitando su mantenimiento.
package com.ivor.empleos.controllers;

// ****************** IMPORTACI√ìN DE CLASES ******************

// import java.util.List;
// - Importa la interfaz `List`, que permite manejar listas de elementos.
// - Se usar√° para almacenar m√∫ltiples objetos `Categoria`.
import java.util.List;

// import org.springframework.beans.factory.annotation.Autowired;
// - Importa la anotaci√≥n `@Autowired`, que permite la **inyecci√≥n de dependencias** en Spring.
// - Spring usa esta anotaci√≥n para **instanciar autom√°ticamente** la implementaci√≥n del servicio `I_CategoriaService`.
import org.springframework.beans.factory.annotation.Autowired;
// import org.springframework.stereotype.Controller;
// - Importa la anotaci√≥n `@Controller`, que indica que esta clase es un **controlador** de Spring MVC.
// - En Spring MVC, los controladores manejan **solicitudes HTTP** y devuelven **vistas** o datos.
import org.springframework.stereotype.Controller;
// import org.springframework.ui.Model;
// - Importa la interfaz `Model`, que permite **pasar datos** desde el controlador a la vista.
// - Se usa para agregar atributos a la vista, como listas de categor√≠as.
import org.springframework.ui.Model;
// import org.springframework.validation.BindingResult;
// - Importa `BindingResult`, que se usa para **validar** el objeto `Categoria` antes de guardarlo.
// - Permite detectar errores en el formulario y devolver mensajes de validaci√≥n.
import org.springframework.validation.BindingResult;
// import org.springframework.web.bind.annotation.RequestMapping;
// - Importa `@RequestMapping`, que permite **asociar URLs** con m√©todos del controlador.
// - Se usa para definir **rutas HTTP** que manejar√° cada m√©todo.
import org.springframework.web.bind.annotation.RequestMapping;
// import org.springframework.web.bind.annotation.RequestMethod;
// - Importa `RequestMethod`, que define los **m√©todos HTTP** (GET, POST, etc.).
// - Se usa dentro de `@RequestMapping` para especificar c√≥mo se accede a cada ruta.
import org.springframework.web.bind.annotation.RequestMethod;
// import org.springframework.web.servlet.mvc.support.RedirectAttributes;
// - Importa `RedirectAttributes`, que permite **redireccionar peticiones** despu√©s de ejecutar acciones.
// - Se usa para enviar mensajes de √©xito al redireccionar a otra p√°gina.
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

// import com.ivor.empleos.model.Categoria;
// - Importa la clase `Categoria`, que representa una categor√≠a de empleo.
// - Se usa en los m√©todos de este controlador para manejar categor√≠as.
import com.ivor.empleos.model.Categoria;
// import com.ivor.empleos.service.I_CategoriaService;
// - Importa la interfaz `I_CategoriaService`, que define los m√©todos para manejar categor√≠as.
// - Se usar√° en este controlador para **interactuar con el servicio de categor√≠as**.
import com.ivor.empleos.service.I_CategoriaService;

// ****************** DEFINICI√ìN DEL CONTROLADOR ******************

// @Controller
// - Declara que esta clase es un **controlador de Spring MVC**.
// - Spring la gestiona autom√°ticamente y la usa para manejar **peticiones HTTP**.
@Controller

// @RequestMapping(value="/categorias")
// - Define una **ruta base** para todas las peticiones manejadas por este controlador.
// - Todas las URLs que comiencen con `/categorias` ser√°n procesadas por los m√©todos de esta clase.
@RequestMapping(value = "/categorias")
public class CategoriaController { // Declaramos la clase p√∫blica `CategoriaController`

	// ****************** INYECCI√ìN DE DEPENDENCIA ******************

	// @Autowired
	// - Spring **inyecta autom√°ticamente** una instancia de `I_CategoriaService` en este atributo.
	// - Gracias a esto, podemos usar los m√©todos del servicio sin tener que instanciarlo manualmente.
	@Autowired
	private I_CategoriaService categoriaService;

	// ****************** M√âTODO PARA MOSTRAR TODAS LAS CATEGOR√çAS ******************

	// @RequestMapping(value="/index", method=RequestMethod.GET)
	// - Define que este m√©todo maneja **solicitudes GET** a la URL `/categorias/index`.
	// - Cuando un usuario acceda a `/categorias/index`, se ejecutar√° `mostrarIndex()`.
	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public String mostrarIndex(Model model) { // M√©todo que maneja la visualizaci√≥n de categor√≠as objeto. (Model model)es un objeto permite enviar datos desde el
												 // controlador
												 // hacia la vista.

		// this.categoriaService.buscarTodas();
		// - Llama al servicio `categoriaService` para obtener todas las categor√≠as de la base de datos.
		List<Categoria> categorias = this.categoriaService.buscarTodas();

		// model.addAttribute("_categorias", categorias);
		// - Agrega la lista de categor√≠as al modelo, para que la vista pueda mostrarla.
		model.addAttribute("_categorias", categorias);

		// return "categorias/listCategorias";
		// - Retorna el nombre de la vista que mostrar√° la lista de categor√≠as.
		return "categorias/listCategorias";
	}

	// ****************** M√âTODO PARA MOSTRAR EL FORMULARIO DE CREACI√ìN ******************

	// @RequestMapping(value="/create", method=RequestMethod.GET)
	// - Define que este m√©todo maneja **solicitudes GET** a la URL `/categorias/create`.
	// - Cuando un usuario acceda a `/categorias/create`, se ejecutar√° `crear()`.
	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public String crear(Categoria categoria) { // M√©todo para mostrar el formulario de creaci√≥n
		return "categorias/formCategorias"; // Retorna la vista donde se crea una nueva categor√≠a.
	}

	// ****************** M√âTODO PARA GUARDAR UNA CATEGOR√çA ******************

	// @RequestMapping(value="/save", method=RequestMethod.POST)
	// - Define que este m√©todo maneja **solicitudes POST** a la URL `/categorias/save`.
	// - Se ejecutar√° cuando un usuario env√≠e el formulario de creaci√≥n o edici√≥n de categor√≠a.
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String guardar(Categoria categoria, BindingResult result, RedirectAttributes atributoRedirec) {

		// System.out.println ("Categoria: " + categoria.getNombre());
		// - Imprime el nombre de la categor√≠a ingresada en el formulario.
		System.out.println("Categoria: " + categoria.getNombre());

		// System.out.println ("Descripci√≥n: " + categoria.getDescripcion());
		// - Imprime la descripci√≥n de la categor√≠a ingresada en el formulario.
		System.out.println("Descripci√≥n: " + categoria.getDescripcion());

		// ****************** VALIDACI√ìN DE DATOS ******************

		// if (result.hasErrors()) {...}
		// - Si el objeto `categoria` tiene errores de validaci√≥n, se detectar√°n aqu√≠.
		if (result.hasErrors()){

			// Muestra los errores globales en la consola
			System.out.println("Errores globales:");
			result.getGlobalErrors().forEach(error-> {
				System.out.println("Error: " + error.getDefaultMessage());
			});

			// Muestra los errores de campos espec√≠ficos
			if (result.hasFieldErrors()){
				System.out.println("Errores en campos espec√≠ficos:");
				result.getFieldErrors().forEach(error-> {
					System.out.println("Campo: " + error.getField() + ", Error: " + error.getDefaultMessage());
				});
			}

			// Redirige al formulario si hay errores
			return "redirect:/categorias/index";
		}

		// Guarda la nueva categor√≠a en la base de datos usando el servicio
		this.categoriaService.guardar(categoria);

		// A√±ade un mensaje de √©xito al redireccionar
		atributoRedirec.addFlashAttribute("registroGuardado", "¬°Registro guardado con √©xito!");

		// Redirige al listado de categor√≠as despu√©s de guardar
		return "redirect:/categorias/index";
	}

	/*
	 * üöÄ Conclusi√≥n
	 * Este controlador maneja la gesti√≥n de categor√≠as en Spring Boot, permitiendo listar, crear y guardar categor√≠as de
	 * empleo. Usa Spring MVC para manejar solicitudes HTTP, validaciones y vistas.
	 * 
	 */

}
