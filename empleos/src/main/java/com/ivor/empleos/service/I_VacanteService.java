// ****************** PAQUETE ******************

// package com.ivor.empleos.service;
// - Define el paquete donde se encuentra esta interfaz dentro del proyecto.
// - Los paquetes ayudan a organizar el cÃ³digo y evitar conflictos entre clases con el mismo nombre.
package com.ivor.empleos.service;

// ****************** IMPORTACIÃ“N DE CLASES ******************

// import java.util.List;
// - Importa la interfaz `List`, que permite manejar listas de elementos.
// - Se usa para almacenar mÃºltiples objetos `Vacante` en mÃ©todos de la interfaz.
import java.util.List;

// import com.ivor.empleos.model.Vacante;
// - Importa la clase `Vacante`, que representa una oferta de empleo.
// - Se usarÃ¡ en los mÃ©todos de la interfaz para gestionar vacantes.
import com.ivor.empleos.model.Vacante;

// ****************** DEFINICIÃ“N DE LA INTERFAZ ******************

// public interface I_VacanteService
// - Define una interfaz llamada `I_VacanteService`.
// - En Spring, las interfaces son esenciales para la inyecciÃ³n de dependencias y la abstracciÃ³n.
// - Las clases que implementen esta interfaz deberÃ¡n definir la lÃ³gica para gestionar vacantes.
public interface I_VacanteService {

	// ****************** MÃ‰TODOS DE LA INTERFAZ ******************

	// List<Vacante> buscarTodasVacante();
	// - Define un mÃ©todo `buscarTodasVacante()` que devuelve una lista de todas las vacantes disponibles.
	// - `List<Vacante>` indica que el mÃ©todo retorna una lista de objetos `Vacante`.
	List<Vacante> buscarTodasVacante();

	// Vacante buscarVarPorIdVacante(Integer idVacante);
	// - Define un mÃ©todo `buscarVarPorIdVacante()` para buscar una vacante por su identificador (`idVacante`).
	// - Retorna un objeto `Vacante` si encuentra una coincidencia con el ID proporcionado.
	// - `Integer idVacante` es el parÃ¡metro que representa el ID Ãºnico de una vacante.
	Vacante buscarVarPorIdVacante(Integer idVacante);

	// void guardar(Vacante vacante);
	// - Define un mÃ©todo `guardar()` para almacenar una nueva vacante en el sistema.
	// - `void` indica que el mÃ©todo no devuelve ningÃºn valor.
	// - Recibe un objeto `Vacante`, lo cual indica que se usarÃ¡ para almacenar la vacante en una lista o base de datos.
	void guardar(Vacante vacante);

	/*
	 * ğŸ“Œ ExplicaciÃ³n detallada
	 * âœ… Objetivo de la interfaz Esta interfaz define el contrato que los servicios de Spring deben implementar para
	 * gestionar vacantes de empleo.
	 * 
	 * âœ… Â¿Por quÃ© usamos interfaces en Spring Boot? ğŸ”¹ AbstracciÃ³n â†’ Separamos la declaraciÃ³n de los mÃ©todos de su
	 * implementaciÃ³n. ğŸ”¹ InyecciÃ³n de dependencias â†’ Permite que Spring gestione los servicios sin necesidad de
	 * instanciarlos manualmente. ğŸ”¹ Flexibilidad â†’ Podemos cambiar la implementaciÃ³n sin afectar otras partes del cÃ³digo.
	 * 
	 * âœ… MÃ©todos principales ğŸ”¸ buscarTodasVacante() â†’ Recupera todas las vacantes en forma de lista. ğŸ”¸
	 * buscarVarPorIdVacante(Integer idVacante) â†’ Busca una vacante especÃ­fica por su ID. ğŸ”¸ guardar(Vacante vacante) â†’
	 * Permite almacenar una vacante en el sistema.
	 * 
	 * ğŸš€ ConclusiÃ³n
	 * Esta interfaz es fundamental en una aplicaciÃ³n Spring Boot, ya que permite que el sistema gestione vacantes de empleo
	 * de manera estructurada.
	 */
}




