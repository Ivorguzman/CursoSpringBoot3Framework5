// ****************** PAQUETE ******************

// package com.ivor.empleos.service;
// - Define el paquete donde se encuentra esta interfaz dentro del proyecto.
// - Es una forma de organizar el cÃ³digo dentro de la aplicaciÃ³n.
package com.ivor.empleos.service;

// ****************** IMPORTACIÃ“N DE CLASES ******************

// import java.util.List;
// - Importa la interfaz `List`, que permite manejar listas de elementos.
// - Se usa para almacenar mÃºltiples objetos `Categoria`.
import java.util.List;

// import com.ivor.empleos.model.Categoria;
// - Importa la clase `Categoria`, que representa una categorÃ­a de empleo.
// - Se usarÃ¡ en los mÃ©todos de la interfaz para gestionar categorÃ­as.
import com.ivor.empleos.model.Categoria;

// ****************** DEFINICIÃ“N DE LA INTERFAZ ******************

// public interface I_CategoriaService
// - Define una interfaz llamada `I_CategoriaService`.
// - En Spring, las interfaces son esenciales para la inyecciÃ³n de dependencias y la abstracciÃ³n.
// - Los servicios que implementen esta interfaz deberÃ¡n definir la lÃ³gica de negocio para gestionar categorÃ­as.
public interface I_CategoriaService {

	// ****************** MÃ‰TODOS DE LA INTERFAZ ******************

	// void guardar(Categoria categoria);
	// - Define un mÃ©todo `guardar()`.
	// - `void` significa que no devuelve un valor.
	// - Recibe un objeto `Categoria`, lo cual indica que se usarÃ¡ para almacenar una nueva categorÃ­a.
	void guardar(Categoria categoria);

	// List<Categoria> buscarTodas();
	// - Define un mÃ©todo `buscarTodas()`, que devuelve una lista de todas las categorÃ­as.
	// - `List<Categoria>` indica que el mÃ©todo retorna una lista de objetos `Categoria`.
	// - Se usarÃ¡ en el servicio para recuperar todas las categorÃ­as disponibles.
	List<Categoria> buscarTodas();

	// Categoria buscarPorID(Integer idCategoria);
	// - Define un mÃ©todo `buscarPorID()` para buscar una categorÃ­a por su identificador (`idCategoria`).
	// - Retorna un objeto `Categoria` si se encuentra una coincidencia con el ID proporcionado.
	// - `Integer idCategoria` es el parÃ¡metro que representa el ID Ãºnico de una categorÃ­a.
	Categoria buscarPorID(Integer idCategoria);
}


/*
 * ğŸ“Œ ExplicaciÃ³n detallada
 * âœ… Objetivo de la interfaz Esta interfaz define el contrato que los servicios de Spring deben implementar para
 * gestionar categorÃ­as de empleo.
 * 
 * âœ… Â¿Por quÃ© usamos interfaces en Spring Boot? ğŸ”¹ AbstracciÃ³n â†’ Separamos la declaraciÃ³n de los mÃ©todos de su
 * implementaciÃ³n. ğŸ”¹ InyecciÃ³n de dependencias â†’ Permite que Spring gestione los servicios sin necesidad de
 * instanciarlos manualmente. ğŸ”¹ Flexibilidad â†’ Podemos cambiar la implementaciÃ³n sin afectar otras partes del cÃ³digo.
 * 
 * âœ… MÃ©todos principales ğŸ”¸ guardar(Categoria categoria) â†’ Permite almacenar una categorÃ­a en el sistema. ğŸ”¸
 * buscarTodas() â†’ Recupera todas las categorÃ­as en forma de lista. ğŸ”¸ buscarPorID(Integer idCategoria) â†’ Busca una
 * categorÃ­a especÃ­fica por su ID.
 * 
 * ğŸš€ ConclusiÃ³n
 * Esta interfaz es fundamental en una aplicaciÃ³n Spring Boot, ya que permite que el sistema gestione categorÃ­as de
 * empleo de manera estructurada
 */
