package net.tinajero;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import net.tinajero.model.Categoria;
import net.tinajero.repository.I_CategoriaRepository;

@SpringBootApplication
public class JpaDemoApplication implements CommandLineRunner {

	@Autowired
	private I_CategoriaRepository repositorio;

	public static void main(String[] args) {
		SpringApplication.run(JpaDemoApplication.class, args);


	}

	@Override
	public void run(String... args) throws Exception {
		System.out.println("========================== > Ejecutando public void run(...){......} < =========================");
		// this.guardar();
		// this.eliminar();
		this.buscarPorId();
		this.modificar();
	}


	private void guardar() {

		System.out.println("########################### Insertando Registro ##############################");
		Categoria catagoria = new Categoria();
		catagoria.setNombre("Finanzas");
		catagoria.setDescripcion("Trabajo de finanzas y contabilidad");
		this.repositorio.save(catagoria);
		System.out.println("I_CategoriaRepository repositorio ==>" + this.repositorio);
		System.out.println("catagoria ==> " + catagoria);
	}


	/*
	 * private void modificar() {
	 * System.out.println("########################### modificar() Registro ##############################");
	 * Optional<Categoria> optional = this.repositorio.findById(2);
	 * if (!optional.isEmpty()){
	 * Categoria categoriaTemporal = optional.get();
	 * System.out.println("Categoria categoriaTemporal = optional.get() ==> " + categoriaTemporal);
	 * } else{
	 * System.out.println("optional.isEmpty() Id no exixte ==> " + optional.isEmpty());
	 * }
	 * 
	 * }
	 */

	private void modificar() {
		System.out.println("########################### modificar() Registro ##############################");

		/* Optional<Categoria>: Optional es una clase en Java que se usa para manejar valores que pueden ser nulos */
		Optional<Categoria> optional = this.repositorio.findById(2);


		/*
		 * categoriaTemporal->: Es una expresión lambda. categoriaTemporal es el nombre de la variable que representa el valor
		 * contenido en el Optional (en este caso, un objeto de tipo Categoria).
		 */
		// Usamos ifPresent para manejar el caso en que el Optional tiene un valor
		optional.ifPresent(categoriaTemporal-> {
			System.out.println("Categoria categoriaTemporal = optional.ifPresent() ==> " + categoriaTemporal);
		});

		// Usamos isEmpty para manejar el caso en que el Optional está vacío
		if (optional.isEmpty()){
			System.out.println("optional.isEmpty() Id no existe ==> true");
		}
	}



	private void buscarPorId() {
		System.out.println("########################### buscarPorId() Registro ##############################");
		Optional<Categoria> optional = this.repositorio.findById(14);
		System.out.println(" Optional<Categoria> repositorio.findById(X) ==>  " + this.repositorio);
		if (optional.isPresent()){

			System.out.println("optional.get() ==> " + optional.get());
		} else{
			System.out.println("La Calse Categorio no se encontro");
		}


	}

	private void eliminar() {
		System.out.println("########################### ELEIMINANDO Registro ##############################");
	}

}
